{
  "name": "git-gpt",
  "displayName": "Chat with AI for Git",
  "description": "",
  "version": "0.0.3",
  "engines": {
    "vscode": "^1.95.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "languageModelTools": [
      {
        "name": "get_git_log",
        "displayName": "Get Git Log",
        "toolReferenceName": "getGitLog",
        "canBeReferencedInPrompt": true,
        "userDescription": "Fetches the git log output in a format",
        "modelDescription": "This tool retrieves the git log for the current workspace in a predefined format, which can then be visualized by Git Log Viewer. The log is formatted using the Git command: `git log --all --pretty=format:\"%h (%an) (%ar) (%s) %d [%p]\"`. This tool is essential for fetching the current git history before visualizing or manipulating it in Git Log Viewer."
      },
      {
        "name": "set_workspace",
        "displayName": "Set Workspace Folder",
        "toolReferenceName": "setWorkspace",
        "canBeReferencedInPrompt": true,
        "userDescription": "Set the current workspace folder path",
        "modelDescription": "Sets the workspace folder path for GitGPT operations. The path must be an existing directory.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "Absolute path to the workspace folder"
            }
          },
          "required": [
            "path"
          ]
        }
      },
      {
        "name": "open_git_log_viewer",
        "displayName": "Open Git Log Viewer",
        "toolReferenceName": "openGitLogViewer",
        "canBeReferencedInPrompt": true,
        "userDescription": "Open git log viewer to visualizes the Git commit log as a graph",
        "modelDescription": "This tool opens a custom VSCode webview panel that visualizes the Git commit log as a graph. It is useful when the user asks to view the Git commit history, log tree, branch structure, or recent Git activity in a graphical form. Ideal for prompts like 'show me the commit history' or 'open git log graph'."
      },
      {
        "name": "visualize_git_log",
        "displayName": "Visualize Git Log",
        "toolReferenceName": "visualizeGitLog",
        "canBeReferencedInPrompt": false,
        "modelDescription": "This tool allows you to visualize the changes in the git log after executing a git command. It is particularly useful for demonstrating the effect of git operations (e.g., merging branches, rebasing) and for helping users understand how their git history will evolve. To use this tool, provide two git logs:\n\n1. **Before**: The git log of the repository prior to the operation.\n2. **After**: The simulated git log after the operation has been performed.\n\nIf the intent is to show the effects of a git command on the user's repository, use the current log (using the `get_git_log` tool to get the current state) as the `before` state, and simulate the expected changes for the `after` state. If the git operation is independent of the current repository state, you can manually simulate both the `before` and `after` logs.\n\nGit log format: `git log --all --pretty=format:\"%h (%an) (%ar) (%s) %d [%p]\"`",
        "inputSchema": {
          "type": "object",
          "properties": {
            "before": {
              "type": "string",
              "description": "The git log of the repository prior to the operation."
            },
            "after": {
              "type": "string",
              "description": "The simulated git log after the operation has been performed."
            }
          },
          "required": [
            "before",
            "after"
          ]
        }
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "gitgpt.openGitLogViewer",
          "group": "navigation"
        }
      ]
    },
    "commands": [
      {
        "command": "gitgpt.openGitLogViewer",
        "title": "GitGPT: Open Git Log Viewer",
        "icon": "$(git-branch)"
      },
      {
        "command": "gitgpt.selectWorkspace",
        "title": "GitGPT: Select Workspace"
      },
      {
        "command": "gitgpt.setWorkspace",
        "title": "GitGPT: Set Workspace"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack && cp ./src/**.html ./dist",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.99.1",
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "@vscode/test-electron": "^1.6.2",
    "copy-webpack-plugin": "^12.0.2",
    "eslint": "^8.1.0",
    "glob": "^7.1.7",
    "mocha": "^9.1.3",
    "ts-loader": "^9.2.5",
    "typescript": "^4.4.4",
    "webpack": "^5.52.1",
    "webpack-cli": "^4.8.0"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.9.0",
    "axios": "^1.7.8",
    "dotenv": "^16.4.7",
    "groq-sdk": "^0.9.1",
    "iconv-lite": "^0.6.3"
  }
}